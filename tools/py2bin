#!/usr/bin/env python

import sys
import ast
from asm import joining
import bytecode

deduplicate = lambda iterable: reduce(lambda a, b: a if b in a else a+[b], iterable, [])

def raising_int(n):
    if not isinstance(n, int):
        raise ValueError("Unsupported type for integer")
    return n

class Label(object):
    """Like a byte code, but results in null-length bytecode and can be used
    for jump calculations"""
    def __init__(self, descr):
        self.descr = descr # for debugging purposes
    def __repr__(self):
        return '<%s %s>'%(type(self).__name__, self.descr)

class Jump(object):
    """Placeholder object for a jump whose destination is not yet known"""
    def __init__(self, address):
        self.address = address # typically, this is a Label
    def __repr__(self):
        return '<%s %s>'%(type(self).__name__, self.address)
    nargs = 2 # for worst case calculations

    shortcommand = bytecode.JumpRel1
    longcommand = bytecode.JumpRel2

class JumpIf(Jump):
    shortcommand = bytecode.JumpRel1If
    longcommand = bytecode.JumpRel2If
class JumpIfNot(Jump):
    shortcommand = bytecode.JumpRel1IfNot
    longcommand = bytecode.JumpRel2IfNot

class Call(Jump):
    shortcommand = bytecode.CallRel1
    longcommand = bytecode.CallRel2

class UserFunction(object): pass

class Globals(object):
    def __init__(self):
        self.assigned = []
        self.named = {} # name -> view object
        self.pos = 0

    def getattr(self, attr):
        if attr in self.accessor_types:
            return self.accessor_types[attr](self)
        if attr in self.named:
                return self.named[attr]
        raise AttributeError()

    def setattr(self, attr, value):
        self.assigned.append(value)
        self.named[attr] = value
        print "stored", value, "at", self.pos
        value.pos = self.pos
        self.pos += value.bytes

    def get_initial_data(self):
        data = [0] * self.pos

        # TBD: global initial values
        for view in self.assigned:
            view.store_initial_value(data)

        return data

    class View(object):
        def __init__(self, gv):
            self.gv = gv

        def call(self, args, starargs, keywords, kwargs):
            if args or starargs or kwargs:
                raise Exception("Can't handle those arguments")
            keywords_converted = {}
            for k in keywords:
                keywords_converted[k.arg] = ast.literal_eval(k.value)

            self.init = keywords_converted.pop('init', None)
            if 'length' in keywords_converted:
                self.length = keywords_converted.pop('length', None)
            if self.length is None and self.init is None:
                raise Exception("Global variable is underspecified.")

            if self.length is None: # never happens for arrays
                self.length = len(self.init)

            self.bytes = self.length * self.bytes_per_item
            print "calculating byte usage of %s as %d = %d * %d"%(self, self.bytes, self.length, self.bytes_per_item)

            return self

    class SingleView(View):
        length = 1
        def assign_pop(self):
            return self.store_code(address=self.pos, m=0 if self.pos < 256 else 1)
        def value_push(self):
            return self.load_code(address=self.pos, m=0 if self.pos < 256 else 1)
        def assign_pop_indexpop(self):
            raise Exception("Can not index a scalar")
        def value_push_indexpop(self):
            raise Exception("Can not index a scalar")
    class ArrayView(View):
        length = None
        def assign_pop(self):
            raise Exception("Can not assign a stack value to an array")
        def value_push(self):
            raise Exception("Can not push the array on the stack")
        def assign_pop_indexpop(self):
            return self.store_code(address=self.pos, m=3 if self.pos < 256 else 4)
        def value_push_indexpop(self):
            return self.load_code(address=self.pos, m=3 if self.pos < 256 else 4)

    class SingleView8s(SingleView):
        bytes_per_item = 1
        store_code = bytecode.GlobalStoreS8
        load_code = bytecode.GlobalLoadS8
        def store_initial_value(self, list):
            if self.init is not None:
                list[self.pos] = self.init % 256
    class SingleView8u(SingleView):
        bytes_per_item = 1
        store_code = bytecode.GlobalStoreU8
        load_code = bytecode.GlobalLoadU8
        def store_initial_value(self, list):
            if self.init is not None:
                list[self.pos] = self.init % 256
    class SingleView16(SingleView):
        bytes_per_item = 2
        store_code = bytecode.GlobalStore16
        load_code = bytecode.GlobalLoad16
        def store_initial_value(self, list):
            if self.init is not None:
                a, b = divmod(self.init, 0x100)
                a = a % 0x100
                list[self.pos:self.pos+2] = a, b
    class ArrayView8s(ArrayView):
        bytes_per_item = 1
        store_code = bytecode.GlobalStoreS8
        load_code = bytecode.GlobalLoadS8
        def store_initial_value(self, list):
            if self.init is not None:
                for (i, v) in enumerate(self.init):
                    list[self.pos + i] = v % 256
    class ArrayView8u(ArrayView):
        bytes_per_item = 1
        store_code = bytecode.GlobalStoreU8
        load_code = bytecode.GlobalLoadU8
        def store_initial_value(self, list):
            if self.init is not None:
                for (i, v) in enumerate(self.init):
                    list[self.pos + i] = v % 256
    class ArrayView16(ArrayView):
        bytes_per_item = 2
        store_code = bytecode.GlobalStore16
        load_code = bytecode.GlobalLoad16
        def store_initial_value(self, list):
            if self.init is not None:
                for (i, v) in enumerate(self.init):
                    a, b = divmod(v, 0x100)
                    a = a % 0x100
                    list[self.pos + 2*i:self.pos + 2*i + 2] = a, b

    accessor_types = {
            'int8s': SingleView8s,
            'int8u': SingleView8u,
            'int16': SingleView16,
            'array8s': ArrayView8s,
            'array8u': ArrayView8u,
            'array16': ArrayView16,
            }

class Function(object):
    def __init__(self, name, args, body):
        self.name = name
        if args.kwarg or args.vararg:
            raise Exception("star-args not supported in function definitions")
        try:
            self.defaults = [raising_int(d.n) for d in args.defaults]
        except (ValueError, AttributeError):
            raise Exception("Value not supported for default argument")

        try:
            self.args = [a.id for a in args.args]
        except AttributeError:
            raise Exception("Non-simple arguments not supported")

        self.body = body
        self.code = []
        self.locals = []

    def _locals_from_statement(self, statement):
        if hasattr(statement, "targets"):
            for t in statement.targets:
                if isinstance(t, ast.Name):
                    self.locals.append(t.id)
        if hasattr(statement, "target"):
            if isinstance(statement.target, ast.Name):
                self.locals.append(statement.target.id)
        if hasattr(statement, "body"):
            for s in statement.body:
                self._locals_from_statement(s)

    def _resolve_attribute(self, e, context):
        if not isinstance(e.value, ast.Name):
            raise Exception("Only one-level attributes implemented")
        if e.value.id not in context.globals:
            raise Exception("Not a global variable")
        # FIXME: check for whatever can go wrong as well
        return context.globals[e.value.id].getattr(e.attr)

    def _push_expression(self, e, context):
        if isinstance(e, ast.Name):
            if e.id in self.locals:
                self.code.append(bytecode.PushLocal(self.locals.index(e.id)))
            elif e.id in self.args:
                self.code.append(bytecode.PushLocal(-1-self.args.index(e.id)))
            elif e.id == 'True':
                self.code.append(bytecode.PushImmediate(val=1))
            elif e.id == 'False':
                self.code.append(bytecode.PushImmediate(val=0))
            else:
                raise Exception("Can not access non-local name %r"%e.id)
        elif isinstance(e, ast.Attribute):
            self.code.append(self._resolve_attribute(e, context).value_push())
        elif isinstance(e, ast.Subscript):
            if not isinstance(e.value, ast.Attribute):
                raise Exception("Local arrays not implemented")
            valobj = self._resolve_attribute(e.value, context)
            # TBD: opfimization for constant offsets 
            self._push_expression(e.slice.value, context)
            self.code.append(valobj.value_push_indexpop())
        elif isinstance(e, ast.UnaryOp):
            self._push_expression(e.operand, context)
            if isinstance(e.op, ast.UAdd):
                return # a no-op here
            op2code = {
                    ast.Not: bytecode.LogicNot,
                    ast.Invert: bytecode.BitwiseNot,
                    ast.USub: bytecode.ArithmeticInvert,
                    }
            self.code.append(op2code[type(e.op)]())
        elif isinstance(e, ast.BinOp):
            self._push_expression(e.left, context)
            self._push_expression(e.right, context)
            op2code = {
                    ast.Add: bytecode.Add,
                    ast.Sub: bytecode.Sub,
                    ast.Mult: bytecode.Mul,
                    ast.Div: bytecode.Div,
                    ast.Mod: bytecode.Mod,
                    ast.LShift: bytecode.ShiftLeft,
                    ast.RShift: bytecode.ShiftRight,
                    ast.BitAnd: bytecode.BitwiseAnd,
                    ast.BitOr: bytecode.BitwiseOr,
                    ast.BitXor: bytecode.BitwiseXor,
                    ast.And: bytecode.LogicAnd, # TBD: short circuit logic -- easily possible?
                    ast.Or: bytecode.LogicOr,
                    }
            self.code.append(op2code[type(e.op)]())
        elif isinstance(e, ast.Compare):
            # TBD: short circuit logic
            is_first = True
            for (left, right, op) in zip([e.left]+e.comparators[:-1], e.comparators, e.ops):
                self._push_expression(left, context)
                self._push_expression(right, context)
                if op in (ast.Is, ast.IsNot, ast.In, ast.NotIn):
                    raise Exception("Comparison not implemented")
                op2code = {
                        ast.Eq: bytecode.CompareEE,
                        ast.NotEq: bytecode.CompareNE,
                        ast.Lt: bytecode.CompareLT,
                        ast.Gt: bytecode.CompareGT,
                        ast.LtE: bytecode.CompareLE,
                        ast.GtE: bytecode.CompareGE,
                        }
                self.code.append(op2code[type(op)]())
                if not is_first:
                    self.code.append(bytecode.LogicAnd())
                is_first = False
        elif isinstance(e, ast.Num):
            if not isinstance(e.n, int):
                raise Exception("Unsupported number type %s"%type(e.n))
            self.code.append(bytecode.PushConstant(e.n))
        elif isinstance(e, ast.Call):
            # either it's a userfunc or a normal function
            if not isinstance(e.func, ast.Name):
                raise Exception("Callables can only have simple names") # could be replaced to do function pointer stuff
            if e.func.id in context.globals:
                if context.globals[e.func.id] != UserFunction:
                    raise Exception("Can not call global")
                if e.starargs or e.keywords or e.kwargs or not len(e.args):
                    raise Exception("User functions only supported with >= 1 positional argument(s)")
                if not isinstance(e.args[0], ast.Num) or type(e.args[0].n) != int:
                    raise Exception("User function has to be called with static first argument")
                for a in e.args[-1:0:-1]: # the arguments, backwards
                    self._push_expression(a, context)
                self._push_expression(ast.Num(n=len(e.args)-1), context)
                self.code.append(bytecode.CallUserFunction(e.args[0].n))
            elif e.func.id in context.funcs:
                f = context.funcs[e.func.id]
                if e.starargs or e.keywords or e.kwargs:
                    raise Exception("Only positional arguments are supported.")
                if len(e.args) + len(f.defaults) < len(f.args):
                    raise Exception("Insufficient number of arguments")
                if len(e.args) > len(f.args):
                    raise Exception("Too many arguments")
                for i in range(len(f.args) - len(e.args)):
                    # push defaults while needed
                    self.code.append(bytecode.PushConstant(f.defaults[-1-i]))
                for a in e.args[::-1]:
                    self._push_expression(a, context)
                self.code.append(Call(f))
                if len(f.args) > 0:
                    self.code.append(bytecode.PopMany(len(f.args)-1)) # how practical, it keeps the top which is just the return value
            else:
                raise Exception("Call to uncallable or unknown object %r"%e.func.id)
        else:
            raise Exception("Can not evaluate expression %r"%e)

    def _parse_assign(self, s, context):
        # in any case, evaluate the right side to stack top, then pop it into the left side
        # right side
        self._push_expression(s.value, context)

        # left side
        for x in range(len(s.targets)-1):
            self.code.append(bytecode.Bury(k=0)) # duplicate top element
        for t in s.targets:
            if isinstance(t, ast.Name):
                if t.id in self.locals:
                    self.code.append(bytecode.PopLocal(self.locals.index(t.id)))
                else:
                    raise Exception("Can not assign to non-local name")
            elif isinstance(t, ast.Attribute):
                self.code.append(self._resolve_attribute(t, context).assign_pop())
            elif isinstance(t, ast.Subscript):
                if not isinstance(t.value, ast.Attribute):
                    raise Exception("Local arrays not implemented")
                valobj = self._resolve_attribute(t.value, context)
                # TBD: opfimization for constant offsets 
                self._push_expression(t.slice.value, context)
                self.code.append(valobj.assign_pop_indexpop())
            else:
                raise Exception("Can not assign to %s"%t)

    def _parse_range(self, s):
        # TBD: empty ranges behave different than in python? (1, -1, 1)
        if not isinstance(s, ast.Call) or not isinstance(s.func, ast.Name) or s.func.id not in ('range', 'xrange'):
            raise Exception("For loops only supported with range iterators")
        if s.starargs or s.keywords or s.kwargs or len(s.args) not in range(1, 4):
            raise Exception("(x)range only supported with 1-3 positional arguments")
        if len(s.args) == 1:
            start, stop, step = ast.Num(n=0), s.args[0], ast.Num(n=1)
        elif len(s.args) == 2:
            start, stop, step = s.args[0], s.args[1], ast.Num(n=1)
        else:
            start, stop, step = s.args

        return start, stop, step

    def _parse(self, s, context, break_jump=None, continue_jump=None):
        if isinstance(s, ast.Assign):
            self._parse_assign(s, context)
        elif isinstance(s, ast.For):
            if not isinstance(s.target, ast.Name):
                raise Exception("Iteration over non-locals is not supported.")
            loopcountlocal = self.locals.index(s.target.id)
            # loop setup
            start, stop, step = self._parse_range(s.iter)
            if isinstance(step, ast.Num) and isinstance(step.n, int):
                self._push_expression(stop, context)
                self._push_expression(start, context)

                loop_compare = Label("comp")
                loop_regular_end = Label("regend")
                loop_break_end = Label("breakend")
                loop_continue = Label("continue")
                self.code.append(loop_compare)

                self.code.append(bytecode.Bury(k=0)) # get a copy of start + i*step
                # get a "copy" of end
                self.code.append(bytecode.Dig(k=1))
                self.code.append(bytecode.Bury(k=2))

                if step.n > 0:
                    self.code.append(bytecode.CompareGE())
                else:
                    self.code.append(bytecode.CompareLE())
                self.code.append(JumpIf(address=loop_regular_end))

                # store current iteration counter
                self.code.append(bytecode.Bury(k=0))
                self.code.append(bytecode.PopLocal(sfa=loopcountlocal))

                # process body
                for iterated_s in s.body:
                    self._parse(iterated_s, context, loop_break_end, loop_continue)

                # increment counter, jump to top
                self.code.append(loop_continue)
                self._push_expression(step, context)
                self.code.append(bytecode.Add())
                self.code.append(Jump(address=loop_compare))

                self.code.append(loop_regular_end)

                # process else
                for iterated_s in s.orelse:
                    self._parse(iterated_s, context, break_jump, continue_jump) # TBD: check standard python semantics

                self.code.append(loop_break_end)

                self.code.append(bytecode.DropValue()) # remove start + i*step
                self.code.append(bytecode.DropValue()) # remove stop
            else:
                raise Exception("Variable step not supported")

        elif isinstance(s, ast.If):
            if_end = Label("endif")
            if_else = Label("else")
            self._push_expression(s.test, context)
            self.code.append(JumpIfNot(address=if_else))
            for iterated_s in s.body:
                self._parse(iterated_s, context, break_jump, continue_jump)
            if s.orelse:
                self.code.append(Jump(address=if_end))
                self.code.append(if_else)
                for iterated_s in s.orelse:
                    self._parse(iterated_s, context, break_jump, continue_jump)
                self.code.append(if_end)
            else:
                self.code.append(if_else)

        elif isinstance(s, ast.Expr):
            if isinstance(s.value, ast.Str):
                # a doc string
                pass
            else:
                self._push_expression(s.value, context)
                self.code.append(bytecode.DropValue())

        elif isinstance(s, ast.Pass):
            pass

        elif isinstance(s, ast.While):
            # body, test, orelse
            while_start = Label("whilestart")
            while_else = Label("whileelse")
            while_end = Label("whileend")

            self.code.append(while_start)

            self._push_expression(s.test, context)
            self.code.append(JumpIfNot(address=while_else))

            for iterated_s in s.body:
                self._parse(iterated_s, context, while_end, while_start)
            self.code.append(Jump(while_start))
            self.code.append(while_else)
            for iterated_s in s.orelse:
                self._parse(iterated_s, context, break_jump, continue_jump) # TBD: check standard python semantics
            self.code.append(while_end)

        elif isinstance(s, ast.Return):
            if s.value:
                self._push_expression(s.value, context)
                self.code.append(bytecode.Return())
            else:
                self.code.append(bytecode.Return0())

        elif isinstance(s, ast.Continue):
            if continue_jump is None:
                raise Exception("Continue where there is nothing to continue")

            self.code.append(Jump(continue_jump))

        elif isinstance(s, ast.Break):
            if break_jump is None:
                raise Exception("Break where there is nothing to break")

            self.code.append(Jump(break_jump))

        else:
            raise Exception("Unknown statement %r"%s)

    def parse(self, context):
        # analyze local variables
        for statement in self.body:
            self._locals_from_statement(statement)
        self.locals = deduplicate(self.locals)

        if self.locals:
            self.code.append(bytecode.PushZeros(len(self.locals)-1))

        for statement in self.body:
            self._parse(statement, context)

        if not isinstance(self.code[-1], bytecode.Return):
            self.code.append(bytecode.Return0())


class Py2Bin(object):
    def __init__(self):
        self.globals = {}
        self.funcs = {}

    def _parse_global_statement(self, statement):
        if isinstance(statement, ast.ImportFrom):
            if statement.module == "evm":
                for n in statement.names:
                    if n.name == 'Globals':
                        self.globals[n.asname or 'Globals'] = Globals
                    elif n.name == 'userfunc':
                        self.globals[n.asname or 'userfunc'] = UserFunction
                    else:
                        raise Exception("No object %s in evm."%n.name)
            else:
                raise Exception("Can not import unknown modules.")

        elif isinstance(statement, ast.Assign):
            if isinstance(statement.value, ast.Call):
                # probably something globals related
                if isinstance(statement.value.func, ast.Name) and \
                        statement.value.func.id in self.globals and \
                        self.globals[statement.value.func.id] == Globals:
                    if statement.value.args or statement.value.starargs or statement.value.kwargs or statement.value.keywords:
                        raise Exception("Unknown arguments.")
                    for t in statement.targets:
                        if not isinstance(t, ast.Name):
                            raise Exception("Can't assign globals to anything than a name.")
                        self.globals[t.id] = Globals()

                elif isinstance(statement.value.func, ast.Attribute):
                    if not isinstance(statement.value.func.value, ast.Name):
                        raise Exception("Can't resolve attribute")
                    value_name = statement.value.func.value.id
                    if value_name not in self.globals:
                        raise Exception("Unknown variable")
                    accessed = self.globals[value_name].getattr(statement.value.func.attr)
                    retval = accessed.call(statement.value.args, statement.value.starargs, statement.value.keywords, statement.value.kwargs)

                    for t in statement.targets:
                        if not isinstance(t, ast.Attribute):
                            raise Exception("Only globals can be a global")
                        if not isinstance(t.value, ast.Name):
                            raise Exception("Can only assign to second level attributes")
                        if t.value.id not in self.globals:
                            raise Exception("Unknown variable")
                        self.globals[t.value.id].setattr(t.attr, retval)
            else:
                raise Exception("Global variables can only be declared using the Globals() mechanisms for type strictness reasons.")

        elif isinstance(statement, ast.FunctionDef):
            self.funcs[statement.name] = Function(statement.name, statement.args, statement.body)

        elif isinstance(statement, ast.If):
            if statement.orelse or not isinstance(statement.test, ast.Compare) or len(statement.test.ops) != 1 or not isinstance(statement.test.ops[0], ast.Eq) or not isinstance(statement.test.left, ast.Name) or statement.test.left.id != '__name__' or len(statement.test.comparators) != 1 or not isinstance(statement.test.comparators[0], ast.Str) or statement.test.comparators[0].s != '__main__':
                raise Exception("The only allowed top-level if is an `if __name__ == \"__main__\".")

        else:
            raise Exception("Unknown top level statement %r"%statement)

    def feed(self, data):
        t = ast.parse(data)

        for statement in t.body:
            self._parse_global_statement(statement)

        for fn, f in self.funcs.items():
            f.parse(self)

    def get_output(self):
        final_code = []

        globalobjects = [go for go in self.globals.values() if isinstance(go, Globals)]

        if globalobjects:
            if len(globalobjects) != 1:
                raise Exception("Needing at maximum one global object")
            (go, ) = globalobjects
            final_code.extend(go.get_initial_data())
            code_start = go.pos
        else:
            code_start = 0

        labels = {}
        commandlist = []
        worstcasepositions = []
        worstcasepos = code_start

        for fobj in self.funcs.values():
            labels[fobj] = len(commandlist)
            for command in fobj.code:
                if isinstance(command, Label):
                    labels[command] = len(commandlist)
                else:
                    commandlist.append(command)
                    worstcasepositions.append(worstcasepos)
                    worstcasepos += command.nargs + 1

        for (ln, command) in enumerate(commandlist):
            if isinstance(command, Jump):
                assert command.address in labels
                worstcase_reladdr = worstcasepositions[labels[command.address]] - worstcasepositions[ln]
                if -128 <= worstcase_reladdr < 128:
                    command.nargs = 1

        realpositions = []
        realposition = code_start
        for command in commandlist:
            realpositions.append(realposition)
            realposition += command.nargs + 1

        for (ln, command) in enumerate(commandlist):
            if isinstance(command, Jump):
                currentpos = realpositions[ln]
                reladdr = realpositions[labels[command.address]] - realpositions[ln]
                old_nargs = command.nargs
                if old_nargs == 1:
                    commandlist[ln] = command.shortcommand(reladdr=reladdr)
                else:
                    commandlist[ln] = command.longcommand(reladdr=reladdr)
                assert commandlist[ln].nargs == old_nargs

        self.sym = {}
        for (k, v) in labels.items():
            if isinstance(k, Function):
                # a function entry point
                self.sym[realpositions[v]] = k.name

        for command in commandlist:
            final_code.extend(command.to_bin())

        return "".join(chr(x) for x in final_code)

def main():
    pb = Py2Bin()
    pb.feed(open(sys.argv[1]).read())
    converted = pb.get_output()
    with open(sys.argv[1] + '.bin', 'w') as f:
        f.write(converted)
    with open(sys.argv[1] + '.sym', 'w') as f:
        f.write("".join("%04x %s\n"%(v, k) for (v, k) in pb.sym.items()))

if __name__ == "__main__":
    main()
